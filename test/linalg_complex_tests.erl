-module(linalg_complex_tests).
-import(linalg_complex, [to_polar/1, from_polar/1]).
-import(linalg_complex, [exp/1, ln/1, pow/2]).
-import(linalg_complex, [sqrt/1, qbrt/1, absolute/1, arg/1, usort/1]).
-import(linalg_complex, [sum/1, sum/2, mltp/1, mltp/2, reciprocal/1]).
-export([approx/1]).
-define(NODEBUG, true). % Define NODEBUG for a quiet test.
-include_lib("eunit/include/eunit.hrl").
-define(PRECISION,1000000).

complex_polar_test() ->
	?assertEqual({polar, 0.0, 0.0}, to_polar(0)),
	?assertEqual({polar, 1.0, 0.0}, to_polar(1)),
	?assertEqual({polar, 6.4, 0.0}, to_polar(6.4)),
	?assertEqual({polar, 5.0, math:pi()}, to_polar(-5)),
	?assertEqual(1.0, from_polar({polar, 1, 0})),
	?assertEqual(-1.0, from_polar({polar, 1, math:pi()})),
	Range = lists:seq(-10, 10),
	TupleList = [{0.0+R,0.0+I} || R<-Range, I<-Range],
	ComplexList = lists:map(fun({X,0.0})->X;(X)->X end, TupleList),
	Func = fun(Complex) -> from_polar(to_polar(Complex)) end,
	?assertEqual(ComplexList, approx(lists:map(Func, ComplexList))).

complex_sqrt_1_test() ->
    ?assertEqual(0.0, sqrt(0)),
    ?assertEqual(0.0, sqrt({0,0})),
    ?assertEqual(2.0, sqrt(4)),
    ?assertEqual(2.0, sqrt({4,0})),
    ?assertEqual({0.0,2.0}, sqrt(-4)),
    ?assertEqual({0.0,2.0}, sqrt({-4,0})),
    ?assertEqual([
        {1.581139, 1.581139}, % {0,5}
        {1.581139, -1.581139}, % {0,-5}
        {1.674149, 0.895977}, % {2,3}
        {0.895977, 1.674149}, % {-2,3}
        {1.674149, -0.895977}, % {2,-3}
        {0.895977, -1.674149} % {-2,-3}
    ], approx([
        sqrt({0,5}),
        sqrt({0,-5}),
        sqrt({2,3}),
        sqrt({-2,3}),
        sqrt({2,-3}),
        sqrt({-2,-3})
    ])).

complex_exp_test() ->
    ?assertEqual([1.0,148.413159,1.648721,0.006738,0.606531,
        {0.283662,-0.958924},
        {0.877583,0.479426},
        {0.283662,0.958924},
        {0.877583,-0.479426},
        {-7.31511,1.042744},
        {-0.133981,0.019099},
        {-7.31511,-1.042744},
        {-0.133981,-0.019099},
        {-1.20918,0.172364},
        {-0.810537,0.115539},
        {-1.20918,-0.172364},
        {-0.810537,-0.115539},
        {7.059035,2.183615},
        {0.129291,0.039994},
        {7.059035,-2.183615},
        {0.129291,-0.039994},
        {1.166851,0.360949},
        {0.782163,0.241951},
        {1.166851,-0.360949},
        {0.782163,-0.241951}
    ], approx([
        exp(0), exp(5), exp(0.5), exp(-5), exp(-0.5),
        exp({0,5}), exp({0,0.5}), exp({0,-5}), exp({0,-0.5}),
        exp({2,3}), exp({-2,3}), exp({2,-3}), exp({-2,-3}),
        exp({0.2,3}), exp({-0.2,3}), exp({0.2,-3}), exp({-0.2,-3}),
        exp({2,0.3}), exp({-2,0.3}), exp({2,-0.3}), exp({-2,-0.3}),
        exp({0.2,0.3}), exp({-0.2,0.3}), exp({0.2,-0.3}), exp({-0.2,-0.3})
    ])).

complex_qbrt_1_test() ->
    ?assertEqual([0.0, 0.0, 2.0, 2.0,
        {0.854988,1.480883}, % -5
        {1.480883, 0.854988}, % {0,5}
        {1.480883, -0.854988}, % {0,-5}
        {1.451857, 0.493404}, % {2,3}
        {1.153228, 1.010643}, % {-2,3}
        {1.451857, -0.493404}, % {2,-3}
        {1.153228, -1.010643} % {-2,-3}
    ], approx([
        qbrt(0),
        qbrt({0,0}),
        qbrt(8),
        qbrt({8,0}),
        qbrt(-5),
        qbrt({0,5}),
        qbrt({0,-5}),
        qbrt({2,3}),
        qbrt({-2,3}),
        qbrt({2,-3}),
        qbrt({-2,-3})
    ])).

complex_ln_test() ->
    ?assertEqual(complex_infinity, catch ln(0)),
    ?assertEqual([1.609438,-0.693147,
        {1.609438,3.141593},
        {-0.693147,3.141593},
        {1.609438,1.570796},
        {-0.693147,1.570796},
        {1.609438,-1.570796},
        {-0.693147,-1.570796},
        {1.282475,0.982794},
        {1.282475,2.158799},
        {1.282475,-0.982794},
        {1.282475,-2.158799},
        {1.10083,1.504228},
        {1.10083,1.637364},
        {1.10083,-1.504228},
        {1.10083,-1.637364},
        {0.704272,0.14889},
        {0.704272,2.992703},
        {0.704272,-0.14889},
        {0.704272,-2.992703},
        {-1.02011,0.982794},
        {-1.02011,2.158799},
        {-1.02011,-0.982794},
        {-1.02011,-2.158799}
    ], approx([
        ln(5), ln(0.5), ln(-5), ln(-0.5),
        ln({0,5}), ln({0,0.5}), ln({0,-5}), ln({0,-0.5}),
        ln({2,3}), ln({-2,3}), ln({2,-3}), ln({-2,-3}),
        ln({0.2,3}), ln({-0.2,3}), ln({0.2,-3}), ln({-0.2,-3}),
        ln({2,0.3}), ln({-2,0.3}), ln({2,-0.3}), ln({-2,-0.3}),
        ln({0.2,0.3}), ln({-0.2,0.3}), ln({0.2,-0.3}), ln({-0.2,-0.3})
    ])).

complex_pow_test() ->
    ?assertEqual([
        complex_infinity, complex_infinity,
        complex_infinity, complex_infinity,
        complex_infinity, complex_infinity
    ], [
        catch pow(0, -5), catch pow(0, -0.5),
        catch pow(0, {-2, 3}), catch pow(0, {-0.2, 3}),
        catch pow(0, {-2, -3}), catch pow(0, {-0.2, -3})
    ]),
    ?assertEqual([
        0.0,0.0,0.0,0.0,0.0,0.0,3125.0,0.00032,-3125.0,-0.00032,
        0.03125,32.0,-0.03125,-32.0,2.236068,0.447214,
        {0.0,2.236068},
        {0.0,-0.447214},
        0.707107,1.414214,
        {0.0,0.707107},
        {0.0,-1.414214},
        {0.490103,-0.023068},
        {0.621984,0.466723},
        {0.000721,-0.000366},
        {0.07989,0.012421},
        {0.710053,-0.224348},
        {0.690214,0.279483},
        {-0.052252,-0.004255},
        {-0.039899,-0.034006},
        {0.583951,-0.220596},
        {0.590631,0.202031},
        {-0.008008,0.004071},
        {-0.008877,-0.00138},
        {0.982758,-0.78719},
        {1.995396,0.03078},
        {8.930788,-4.540196},
        {989.965851,153.919087},
        {1.822231,-0.575751},
        {1.77132,0.717247},
        {-647.48229,-52.731445},
        {-494.412489,-421.390807},
        {1.498612,-0.566122},
        {1.515755,0.518479},
        {-99.230973,50.446623},
        {-109.996206,-17.102121},
        {2.035878,0.095823},
        {1.028593,-0.771833},
        {1102.566367,560.518037},
        {12.221801,-1.900236},
        {1.280512,0.40459},
        {1.244736,-0.504021},
        {-19.012104,1.54836},
        {-14.517496,12.373351},
        {1.498612,0.566122},
        {1.515755,-0.518479},
        {-99.230973,-50.446623},
        {-109.996206,17.102121},
        {0.619848,0.496499},
        {0.501035,-0.007729},
        {0.088977,0.045234},
        {0.000986,-0.000153},
        {0.498966,0.157653},
        {0.485025,-0.196397},
        {-0.001534,0.000125},
        {-0.001172,0.000999},
        {0.583951,0.220596},
        {0.590631,-0.202031},
        {-0.008008,-0.004071},
        {-0.008877,0.00138},
        {0.603587,-0.066343},
        {0.80431,0.528456},
        {0.003123,-0.006057},
        {0.607567,-0.308756},
        {1.153097,-1.048224},
        {2.467064,-0.11608},
        {38.701888,-75.061303},
        {7528.752129,-3825.995835},
        {1.636985,0.179927},
        {0.868416,-0.570575},
        {67.2431,130.41624},
        {1.308093,0.664753},
        {0.474837,0.431651},
        {0.404445,0.01903},
        {0.005426,0.010525},
        {0.000106,0.000054}
    ], approx([
        pow(0, 5), pow(0, 0.5),
        pow(0, {2, 3}), pow(0, {0.2, 3}),
        pow(0, {2, -3}), pow(0, {0.2, -3}),
        pow(5, 5), pow(5, -5), pow(-5, 5), pow(-5, -5),
        pow(0.5, 5), pow(0.5, -5), pow(-0.5, 5), pow(-0.5, -5),
        pow(5, 0.5), pow(5, -0.5), pow(-5, 0.5), pow(-5, -0.5),
        pow(0.5, 0.5), pow(0.5, -0.5), pow(-0.5, 0.5), pow(-0.5, -0.5),
        
        pow({0,0.3}, {0.2,0.3}), pow({0,3}, {0.2,0.3}),
        pow({0,0.3}, {2,3}), pow({0,3}, {2,3}),
        pow({0.2,0.3}, {0,0.3}), pow({2,3}, {0,0.3}),
        pow({0.2,0.3}, {0,3}), pow({2,3}, {0,3}),
        pow({0,0.3}, {0,0.3}), pow({0,3}, {0,0.3}),
        pow({0,0.3}, {0,3}), pow({0,3}, {0,3}),
        
        pow({0,-0.3}, {0.2,0.3}), pow({0,-3}, {0.2,0.3}),
        pow({0,-0.3}, {2,3}), pow({0,-3}, {2,3}),
        pow({-0.2,-0.3}, {0,0.3}), pow({-2,-3}, {0,0.3}),
        pow({-0.2,-0.3}, {0,3}), pow({-2,-3}, {0,3}),
        pow({0,-0.3}, {0,0.3}), pow({0,-3}, {0,0.3}),
        pow({0,-0.3}, {0,3}), pow({0,-3}, {0,3}),
        
        pow({0,0.3}, {-0.2,-0.3}), pow({0,3}, {-0.2,-0.3}),
        pow({0,0.3}, {-2,-3}), pow({0,3}, {-2,-3}),
        pow({0.2,0.3}, {0,-0.3}), pow({2,3}, {0,-0.3}),
        pow({0.2,0.3}, {0,-3}), pow({2,3}, {0,-3}),
        pow({0,0.3}, {0,-0.3}), pow({0,3}, {0,-0.3}),
        pow({0,0.3}, {0,-3}), pow({0,3}, {0,-3}),
        
        pow({0,-0.3}, {-0.2,-0.3}), pow({0,-3}, {-0.2,-0.3}),
        pow({0,-0.3}, {-2,-3}), pow({0,-3}, {-2,-3}),
        pow({-0.2,-0.3}, {0,-0.3}), pow({-2,-3}, {0,-0.3}),
        pow({-0.2,-0.3}, {0,-3}), pow({-2,-3}, {0,-3}),
        pow({0,-0.3}, {0,-0.3}), pow({0,-3}, {0,-0.3}),
        pow({0,-0.3}, {0,-3}), pow({0,-3}, {0,-3}),
        
        pow({0.2,0.3}, {0.2,0.3}), pow({2,3}, {0.2,0.3}),
        pow({0.2,0.3}, {2,3}), pow({2,3}, {2,3}),
        pow({-0.2,-0.3}, {0.2,0.3}), pow({-2,-3}, {0.2,0.3}),
        pow({-0.2,-0.3}, {2,3}), pow({-2,-3}, {2,3}),
        pow({0.2,0.3}, {-0.2,-0.3}), pow({2,3}, {-0.2,-0.3}),
        pow({0.2,0.3}, {-2,-3}), pow({2,3}, {-2,-3}),
        pow({-0.2,-0.3}, {-0.2,-0.3}), pow({-2,-3}, {-0.2,-0.3}),
        pow({-0.2,-0.3}, {-2,-3}), pow({-2,-3}, {-2,-3})
    ])).

complex_size_1_test() ->
    ?assertEqual([
        0.0, 2.0, 2.0, 2.0, 2.0,
        5.0, 5.0, 5.0, 5.0,
        2.5, 2.5, 2.5, 2.5,
        3.605551, 3.605551, 3.605551, 3.605551
    ], approx([
        absolute(0), absolute(2), absolute(-2), absolute({0,2}), absolute({0,-2}),
        absolute({3,4}), absolute({-3,4}), absolute({3,-4}), absolute({-3,-4}),
        absolute(2.5), absolute(-2.5), absolute({0,2.5}), absolute({0,-2.5}),
        absolute({2,3}), absolute({-2,3}), absolute({2,-3}), absolute({-2,-3})
    ])).

complex_absolute_1_test() ->
    ?assertEqual(0.0, absolute(0)),
    ?assertEqual(0.0, absolute({0,0})),
    ?assertEqual(5.0, absolute(5)),
    ?assertEqual(5.0, absolute({5,0})),
    ?assertEqual(5.0, absolute({0,5})),
    ?assertEqual(5.0, absolute({3,4})),
    ?assertEqual(5.0, absolute(-5)),
    ?assertEqual(5.0, absolute({0,-5})),
    ?assertEqual(5.0, absolute({-3,4})),
    ?assertEqual(5.0, absolute({3,-4})),
    ?assertEqual(5.0, absolute({-3,-4})),
    ?assertEqual([3.605551], approx([absolute({2,3})])).

complex_arg_1_test() ->
    ?assertEqual(0.0, arg(0)),
    ?assertEqual(0.0, arg({0,0})),
    ?assertEqual(math:pi(), arg(-1)),
    ?assertEqual(math:pi(), arg(-5)),
    ?assertEqual(math:pi(), arg(-0.5)),
    ?assertEqual(1/2*math:pi(), arg({0,1})),
    ?assertEqual(1/2*math:pi(), arg({0,5})),
    ?assertEqual(1/2*math:pi(), arg({0,0.5})),
    ?assertEqual(-1/2*math:pi(), arg({0,-1})),
    ?assertEqual(-1/2*math:pi(), arg({0,-5})),
    ?assertEqual(-1/2*math:pi(), arg({0,-0.5})),
    ?assertEqual(approx([1/4*math:pi()]), approx([arg({1,1})])),
    ?assertEqual(approx([-1/4*math:pi()]), approx([arg({1,-1})])),
    ?assertEqual(approx([3/4*math:pi()]), approx([arg({-1,1})])),
    ?assertEqual(approx([-3/4*math:pi()]), approx([arg({-1,-1})])).

complex_usort_1_test() ->
    ?assertEqual([], usort([])),
    ?assertEqual([5.8], usort([5.8])),
    ?assertEqual([5.8], usort([5.799999999998, 5.800000000002])),
    ?assertEqual([1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0], approx(usort(
        [1,9,2,8,3,7,4,6,5,5,6,4,7,3,8,2,8.99999999999,1.00000000001]
    ))).

complex_arithmetic_test() ->
    ?assertEqual(complex_infinity, catch linalg:divide(1,0)),
    ?assertEqual([
        {6.0,8.0},
        {2.0,2.0},
        {-7.0,22.0},
        {1.769231,-0.153846}
    ], approx([
        linalg:add({4,5}, {2,3}),
        linalg:sub({4,5}, {2,3}),
        linalg:mul({4,5}, {2,3}),
        linalg:divide({4,5}, {2,3})
    ])).

complex_sum_1_test() ->
    ?assertEqual({7.0,8.0}, sum([1, {2,0}, {0,3}, {4,5}])).

complex_sum_2_test() ->
    ?assertEqual(3.0, sum(1, 2)),
    ?assertEqual(3.0, sum({1,0}, 2)),
    ?assertEqual(3.0, sum(1, {2,0})),
    ?assertEqual(3.0, sum({1,0}, {2,0})),
    ?assertEqual({3.0,9.0}, sum({1,4}, {2,5})),
    ?assertEqual({-4.0,2.0}, sum({1,4}, {-5,-2})),
    ?assertEqual({6.8,11.2}, sum({1.2,3.4}, {5.6,7.8})).

complex_mltp_1_test() ->
    ?assertEqual([{-196.0,83.0}], approx([mltp([{2,3},{4,5},{6,7}])])).

complex_mltp_2_test() ->
    ?assertEqual([6.0,6.0,6.0,6.0,{-14.0, 23.0}, {-15.55, 26.4}], approx([
        mltp(3, 2),
        mltp({3,0}, 2),
        mltp(3, {2,0}),
        mltp({3,0}, {2,0}),
        mltp({3,4}, {2,5}),
        mltp({3.1,4.2}, {2.3,5.4})
    ])).

complex_reciprocal_2_test() ->
    ?assertEqual(
        [0.5, 0.5, 0.4, 0.4, {0.153846, -0.230769}, {0.160932, 0.172031}],
        approx([
            reciprocal(2),
            reciprocal({2, 0}),
            reciprocal(2.5),
            reciprocal({2.5, 0}),
            reciprocal({2, 3}),
            reciprocal({2.9, -3.1})
        ])
    ).

approx(Fs) ->
    approx(Fs,[]).
approx([],Acc) ->
    lists:reverse(Acc);
approx([{Real,Imaginary}|Tail],Acc) ->
    approx(Tail,[{
        round(Real*?PRECISION)/?PRECISION,
        round(Imaginary*?PRECISION)/?PRECISION
    }|Acc]);
approx([Real|Tail],Acc) ->
    approx(Tail,[round(Real*?PRECISION)/?PRECISION|Acc]).
